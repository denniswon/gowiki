/// <reference types="react" />
export declare const Img: import("styled-components").StyledComponent<"img", any, {
    center?: boolean;
} & {
    w?: (string | number) & (string | number | string[] | number[]);
    maxw?: (string | number) & (string | number | string[] | number[]);
    minw?: (string | number) & (string | number | string[] | number[]);
    h?: (string | number) & (string | number | string[] | number[]);
    minh?: (string | number) & (string | number | string[] | number[]);
    maxh?: (string | number) & (string | number | string[] | number[]);
    display?: (string | number) & (string | string[]);
    sz?: (string | number) & (string | number | string[] | number[]);
    verticalAlign?: string | string[];
} & import("../../../styles-global/src/styledSystems").TypographyProps & {
    m?: (string | number) & (string | number | string[] | number[]);
    mh?: (string | number) & (string | number | string[] | number[]);
    mv?: (string | number) & (string | number | string[] | number[]);
    mt?: (string | number) & (string | number | string[] | number[]);
    mr?: (string | number) & (string | number | string[] | number[]);
    mb?: (string | number) & (string | number | string[] | number[]);
    ml?: (string | number) & (string | number | string[] | number[]);
    p?: (string | number) & (string | number | string[] | number[]);
    ph?: (string | number) & (string | number | string[] | number[]);
    pv?: (string | number) & (string | number | string[] | number[]);
    pt?: (string | number) & (string | number | string[] | number[]);
    pr?: (string | number) & (string | number | string[] | number[]);
    pb?: (string | number) & (string | number | string[] | number[]);
    pl?: (string | number) & (string | number | string[] | number[]);
} & {
    border?: (string | number) & (string | number | string[] | number[]);
    borderTop?: (string | number) & (string | number | string[] | number[]);
    borderRight?: (string | number) & (string | number | string[] | number[]);
    borderBottom?: (string | number) & (string | number | string[] | number[]);
    borderLeft?: (string | number) & (string | number | string[] | number[]);
    borderWidth?: (string | number) & (string | number | string[] | number[]);
    borderStyle?: (string | number) & (string | number | string[] | number[]);
    borderColor?: string;
    borderRadius?: (string | number) & (string | number | string[] | number[]);
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: (string | number) & (string | number | string[] | number[]);
    opacity?: (string | number) & (string | number | string[] | number[]);
    op?: (string | number) & (string | number | string[] | number[]);
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: (string | number) & (string | number | string[] | number[]);
    right?: (string | number) & (string | number | string[] | number[]);
    bottom?: (string | number) & (string | number | string[] | number[]);
    left?: (string | number) & (string | number | string[] | number[]);
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & import("../../../styles-global/src/types").QuickTypographyProps & import("../../../styles-global/src/types").QuickFlexProps & import("../../../styles-global/src/types").QuickPositionProps & import("../../../styles-global/src/types").MediaProps & {
    withShadow?: boolean;
    withStroke?: boolean;
}, never>;
export declare const ImgFrame: import("styled-components").StyledComponent<"div", any, {
    center?: boolean;
} & {
    w?: (string | number) & (string | number | string[] | number[]);
    maxw?: (string | number) & (string | number | string[] | number[]);
    minw?: (string | number) & (string | number | string[] | number[]);
    h?: (string | number) & (string | number | string[] | number[]);
    minh?: (string | number) & (string | number | string[] | number[]);
    maxh?: (string | number) & (string | number | string[] | number[]);
    display?: (string | number) & (string | string[]);
    sz?: (string | number) & (string | number | string[] | number[]);
    verticalAlign?: string | string[];
} & import("../../../styles-global/src/styledSystems").TypographyProps & {
    m?: (string | number) & (string | number | string[] | number[]);
    mh?: (string | number) & (string | number | string[] | number[]);
    mv?: (string | number) & (string | number | string[] | number[]);
    mt?: (string | number) & (string | number | string[] | number[]);
    mr?: (string | number) & (string | number | string[] | number[]);
    mb?: (string | number) & (string | number | string[] | number[]);
    ml?: (string | number) & (string | number | string[] | number[]);
    p?: (string | number) & (string | number | string[] | number[]);
    ph?: (string | number) & (string | number | string[] | number[]);
    pv?: (string | number) & (string | number | string[] | number[]);
    pt?: (string | number) & (string | number | string[] | number[]);
    pr?: (string | number) & (string | number | string[] | number[]);
    pb?: (string | number) & (string | number | string[] | number[]);
    pl?: (string | number) & (string | number | string[] | number[]);
} & {
    border?: (string | number) & (string | number | string[] | number[]);
    borderTop?: (string | number) & (string | number | string[] | number[]);
    borderRight?: (string | number) & (string | number | string[] | number[]);
    borderBottom?: (string | number) & (string | number | string[] | number[]);
    borderLeft?: (string | number) & (string | number | string[] | number[]);
    borderWidth?: (string | number) & (string | number | string[] | number[]);
    borderStyle?: (string | number) & (string | number | string[] | number[]);
    borderColor?: string;
    borderRadius?: (string | number) & (string | number | string[] | number[]);
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: (string | number) & (string | number | string[] | number[]);
    opacity?: (string | number) & (string | number | string[] | number[]);
    op?: (string | number) & (string | number | string[] | number[]);
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: (string | number) & (string | number | string[] | number[]);
    right?: (string | number) & (string | number | string[] | number[]);
    bottom?: (string | number) & (string | number | string[] | number[]);
    left?: (string | number) & (string | number | string[] | number[]);
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: string | number | string[] | number[];
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & import("../../../styles-global/src/types").QuickTypographyProps & import("../../../styles-global/src/types").QuickFlexProps & import("../../../styles-global/src/types").QuickPositionProps & import("../../../styles-global/src/types").MediaProps, never>;
export declare const Video: import("styled-components").StyledComponent<"video", any, {
    center?: boolean;
} & {
    w?: (string | number) & (string | number | string[] | number[]);
    maxw?: (string | number) & (string | number | string[] | number[]);
    minw?: (string | number) & (string | number | string[] | number[]);
    h?: (string | number) & (string | number | string[] | number[]);
    minh?: (string | number) & (string | number | string[] | number[]);
    maxh?: (string | number) & (string | number | string[] | number[]);
    display?: (string | number) & (string | string[]);
    sz?: (string | number) & (string | number | string[] | number[]);
    verticalAlign?: string | string[];
} & import("../../../styles-global/src/styledSystems").TypographyProps & {
    m?: (string | number) & (string | number | string[] | number[]);
    mh?: (string | number) & (string | number | string[] | number[]);
    mv?: (string | number) & (string | number | string[] | number[]);
    mt?: (string | number) & (string | number | string[] | number[]);
    mr?: (string | number) & (string | number | string[] | number[]);
    mb?: (string | number) & (string | number | string[] | number[]);
    ml?: (string | number) & (string | number | string[] | number[]);
    p?: (string | number) & (string | number | string[] | number[]);
    ph?: (string | number) & (string | number | string[] | number[]);
    pv?: (string | number) & (string | number | string[] | number[]);
    pt?: (string | number) & (string | number | string[] | number[]);
    pr?: (string | number) & (string | number | string[] | number[]);
    pb?: (string | number) & (string | number | string[] | number[]);
    pl?: (string | number) & (string | number | string[] | number[]);
} & {
    border?: (string | number) & (string | number | string[] | number[]);
    borderTop?: (string | number) & (string | number | string[] | number[]);
    borderRight?: (string | number) & (string | number | string[] | number[]);
    borderBottom?: (string | number) & (string | number | string[] | number[]);
    borderLeft?: (string | number) & (string | number | string[] | number[]);
    borderWidth?: (string | number) & (string | number | string[] | number[]);
    borderStyle?: (string | number) & (string | number | string[] | number[]);
    borderColor?: string;
    borderRadius?: (string | number) & (string | number | string[] | number[]);
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: (string | number) & (string | number | string[] | number[]);
    opacity?: (string | number) & (string | number | string[] | number[]);
    op?: (string | number) & (string | number | string[] | number[]);
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: (string | number) & (string | number | string[] | number[]);
    right?: (string | number) & (string | number | string[] | number[]);
    bottom?: (string | number) & (string | number | string[] | number[]);
    left?: (string | number) & (string | number | string[] | number[]);
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & import("../../../styles-global/src/types").QuickTypographyProps & import("../../../styles-global/src/types").QuickFlexProps & import("../../../styles-global/src/types").QuickPositionProps & import("../../../styles-global/src/types").MediaProps, never>;
export declare const Divider: import("styled-components").StyledComponent<"div", any, {
    center?: boolean;
} & {
    w?: (string | number) & (string | number | string[] | number[]);
    maxw?: (string | number) & (string | number | string[] | number[]);
    minw?: (string | number) & (string | number | string[] | number[]);
    h?: (string | number) & (string | number | string[] | number[]);
    minh?: (string | number) & (string | number | string[] | number[]);
    maxh?: (string | number) & (string | number | string[] | number[]);
    display?: (string | number) & (string | string[]);
    sz?: (string | number) & (string | number | string[] | number[]);
    verticalAlign?: string | string[];
} & import("../../../styles-global/src/styledSystems").TypographyProps & {
    m?: (string | number) & (string | number | string[] | number[]);
    mh?: (string | number) & (string | number | string[] | number[]);
    mv?: (string | number) & (string | number | string[] | number[]);
    mt?: (string | number) & (string | number | string[] | number[]);
    mr?: (string | number) & (string | number | string[] | number[]);
    mb?: (string | number) & (string | number | string[] | number[]);
    ml?: (string | number) & (string | number | string[] | number[]);
    p?: (string | number) & (string | number | string[] | number[]);
    ph?: (string | number) & (string | number | string[] | number[]);
    pv?: (string | number) & (string | number | string[] | number[]);
    pt?: (string | number) & (string | number | string[] | number[]);
    pr?: (string | number) & (string | number | string[] | number[]);
    pb?: (string | number) & (string | number | string[] | number[]);
    pl?: (string | number) & (string | number | string[] | number[]);
} & {
    border?: (string | number) & (string | number | string[] | number[]);
    borderTop?: (string | number) & (string | number | string[] | number[]);
    borderRight?: (string | number) & (string | number | string[] | number[]);
    borderBottom?: (string | number) & (string | number | string[] | number[]);
    borderLeft?: (string | number) & (string | number | string[] | number[]);
    borderWidth?: (string | number) & (string | number | string[] | number[]);
    borderStyle?: (string | number) & (string | number | string[] | number[]);
    borderColor?: string;
    borderRadius?: (string | number) & (string | number | string[] | number[]);
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: (string | number) & (string | number | string[] | number[]);
    opacity?: (string | number) & (string | number | string[] | number[]);
    op?: (string | number) & (string | number | string[] | number[]);
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: (string | number) & (string | number | string[] | number[]);
    right?: (string | number) & (string | number | string[] | number[]);
    bottom?: (string | number) & (string | number | string[] | number[]);
    left?: (string | number) & (string | number | string[] | number[]);
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: string | number | string[] | number[];
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & import("../../../styles-global/src/types").QuickTypographyProps & import("../../../styles-global/src/types").QuickFlexProps & import("../../../styles-global/src/types").QuickPositionProps & import("../../../styles-global/src/types").MediaProps & {
    slot?: string;
    style?: import("react").CSSProperties;
    title?: string;
    children?: import("react").ReactNode;
    key?: import("react").Key;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "time" | "true" | "false" | "step" | "page" | "location" | "date";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onFocus?: import("react").FocusEventHandler<HTMLDivElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlur?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onChange?: import("react").FormEventHandler<HTMLDivElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInput?: import("react").FormEventHandler<HTMLDivElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onReset?: import("react").FormEventHandler<HTMLDivElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmit?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalid?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onLoad?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onError?: import("react").ReactEventHandler<HTMLDivElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onAbort?: import("react").ReactEventHandler<HTMLDivElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEnded?: import("react").ReactEventHandler<HTMLDivElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPause?: import("react").ReactEventHandler<HTMLDivElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgress?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalled?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDrag?: import("react").DragEventHandler<HTMLDivElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExit?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOver?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStart?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDrop?: import("react").DragEventHandler<HTMLDivElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onSelect?: import("react").ReactEventHandler<HTMLDivElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onScroll?: import("react").UIEventHandler<HTMLDivElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLDivElement>;
    onWheel?: import("react").WheelEventHandler<HTMLDivElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement>;
    ref?: import("react").Ref<HTMLDivElement>;
    theme: any;
    minh: number;
    mt: any;
    mb: any;
    mh: number;
    bg: any;
} & {
    center?: boolean;
} & {
    w?: (string | number) & (string | number | string[] | number[]);
    maxw?: (string | number) & (string | number | string[] | number[]);
    minw?: (string | number) & (string | number | string[] | number[]);
    h?: (string | number) & (string | number | string[] | number[]);
    minh?: (string | number) & (string | number | string[] | number[]);
    maxh?: (string | number) & (string | number | string[] | number[]);
    display?: (string | number) & (string | string[]);
    sz?: (string | number) & (string | number | string[] | number[]);
    verticalAlign?: string | string[];
} & {
    m?: (string | number) & (string | number | string[] | number[]);
    mh?: (string | number) & (string | number | string[] | number[]);
    mv?: (string | number) & (string | number | string[] | number[]);
    mt?: (string | number) & (string | number | string[] | number[]);
    mr?: (string | number) & (string | number | string[] | number[]);
    mb?: (string | number) & (string | number | string[] | number[]);
    ml?: (string | number) & (string | number | string[] | number[]);
    p?: (string | number) & (string | number | string[] | number[]);
    ph?: (string | number) & (string | number | string[] | number[]);
    pv?: (string | number) & (string | number | string[] | number[]);
    pt?: (string | number) & (string | number | string[] | number[]);
    pr?: (string | number) & (string | number | string[] | number[]);
    pb?: (string | number) & (string | number | string[] | number[]);
    pl?: (string | number) & (string | number | string[] | number[]);
} & {
    border?: (string | number) & (string | number | string[] | number[]);
    borderTop?: (string | number) & (string | number | string[] | number[]);
    borderRight?: (string | number) & (string | number | string[] | number[]);
    borderBottom?: (string | number) & (string | number | string[] | number[]);
    borderLeft?: (string | number) & (string | number | string[] | number[]);
    borderWidth?: (string | number) & (string | number | string[] | number[]);
    borderStyle?: (string | number) & (string | number | string[] | number[]);
    borderColor?: string;
    borderRadius?: (string | number) & (string | number | string[] | number[]);
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: (string | number) & (string | number | string[] | number[]);
    opacity?: (string | number) & (string | number | string[] | number[]);
    op?: (string | number) & (string | number | string[] | number[]);
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: (string | number) & (string | number | string[] | number[]);
    right?: (string | number) & (string | number | string[] | number[]);
    bottom?: (string | number) & (string | number | string[] | number[]);
    left?: (string | number) & (string | number | string[] | number[]);
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
}, "slot" | "style" | "title" | "theme" | "ref" | "children" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "minh" | "mh" | "mt" | "mb" | "bg">;
