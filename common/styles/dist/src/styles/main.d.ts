export declare const Img: import("styled-components").StyledComponent<"img", any, {
    center?: boolean;
} & {
    w?: string | number | string[] | number[];
    maxw?: string | number | string[] | number[];
    minw?: string | number | string[] | number[];
    h?: string | number | string[] | number[];
    minh?: string | number | string[] | number[];
    maxh?: string | number | string[] | number[];
    display?: (string | number) & (string | string[]);
    sz?: string | number | string[] | number[];
    verticalAlign?: string | string[];
} & import("../../../styles-global/src/styledSystems").TypographyProps & {
    m?: string | number | string[] | number[];
    mh?: string | number | string[] | number[];
    mv?: string | number | string[] | number[];
    mt?: string | number | string[] | number[];
    mr?: string | number | string[] | number[];
    mb?: string | number | string[] | number[];
    ml?: string | number | string[] | number[];
    p?: string | number | string[] | number[];
    ph?: string | number | string[] | number[];
    pv?: string | number | string[] | number[];
    pt?: string | number | string[] | number[];
    pr?: string | number | string[] | number[];
    pb?: string | number | string[] | number[];
    pl?: string | number | string[] | number[];
} & {
    border?: string | number | string[] | number[];
    borderTop?: string | number | string[] | number[];
    borderRight?: string | number | string[] | number[];
    borderBottom?: string | number | string[] | number[];
    borderLeft?: string | number | string[] | number[];
    borderWidth?: string | number | string[] | number[];
    borderStyle?: string | number | string[] | number[];
    borderColor?: string;
    borderRadius?: string | number | string[] | number[];
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: string | number | string[] | number[];
    opacity?: string | number | string[] | number[];
    op?: string | number | string[] | number[];
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: string | number | string[] | number[];
    right?: string | number | string[] | number[];
    bottom?: string | number | string[] | number[];
    left?: string | number | string[] | number[];
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & import("../../../styles-global/src/types").QuickTypographyProps & import("../../../styles-global/src/types").QuickFlexProps & import("../../../styles-global/src/types").QuickPositionProps & import("../../../styles-global/src/types").MediaProps & {
    withShadow?: boolean;
    withStroke?: boolean;
}, never>;
export declare const ImgFrame: import("styled-components").StyledComponent<"div", any, {
    center?: boolean;
} & {
    w?: string | number | string[] | number[];
    maxw?: string | number | string[] | number[];
    minw?: string | number | string[] | number[];
    h?: string | number | string[] | number[];
    minh?: string | number | string[] | number[];
    maxh?: string | number | string[] | number[];
    display?: (string | number) & (string | string[]);
    sz?: string | number | string[] | number[];
    verticalAlign?: string | string[];
} & import("../../../styles-global/src/styledSystems").TypographyProps & {
    m?: string | number | string[] | number[];
    mh?: string | number | string[] | number[];
    mv?: string | number | string[] | number[];
    mt?: string | number | string[] | number[];
    mr?: string | number | string[] | number[];
    mb?: string | number | string[] | number[];
    ml?: string | number | string[] | number[];
    p?: string | number | string[] | number[];
    ph?: string | number | string[] | number[];
    pv?: string | number | string[] | number[];
    pt?: string | number | string[] | number[];
    pr?: string | number | string[] | number[];
    pb?: string | number | string[] | number[];
    pl?: string | number | string[] | number[];
} & {
    border?: string | number | string[] | number[];
    borderTop?: string | number | string[] | number[];
    borderRight?: string | number | string[] | number[];
    borderBottom?: string | number | string[] | number[];
    borderLeft?: string | number | string[] | number[];
    borderWidth?: string | number | string[] | number[];
    borderStyle?: string | number | string[] | number[];
    borderColor?: string;
    borderRadius?: string | number | string[] | number[];
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: string | number | string[] | number[];
    opacity?: string | number | string[] | number[];
    op?: string | number | string[] | number[];
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: string | number | string[] | number[];
    right?: string | number | string[] | number[];
    bottom?: string | number | string[] | number[];
    left?: string | number | string[] | number[];
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: string | number | string[] | number[];
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & import("../../../styles-global/src/types").QuickTypographyProps & import("../../../styles-global/src/types").QuickFlexProps & import("../../../styles-global/src/types").QuickPositionProps & import("../../../styles-global/src/types").MediaProps, never>;
export declare const Video: import("styled-components").StyledComponent<"video", any, {
    center?: boolean;
} & {
    w?: string | number | string[] | number[];
    maxw?: string | number | string[] | number[];
    minw?: string | number | string[] | number[];
    h?: string | number | string[] | number[];
    minh?: string | number | string[] | number[];
    maxh?: string | number | string[] | number[];
    display?: (string | number) & (string | string[]);
    sz?: string | number | string[] | number[];
    verticalAlign?: string | string[];
} & import("../../../styles-global/src/styledSystems").TypographyProps & {
    m?: string | number | string[] | number[];
    mh?: string | number | string[] | number[];
    mv?: string | number | string[] | number[];
    mt?: string | number | string[] | number[];
    mr?: string | number | string[] | number[];
    mb?: string | number | string[] | number[];
    ml?: string | number | string[] | number[];
    p?: string | number | string[] | number[];
    ph?: string | number | string[] | number[];
    pv?: string | number | string[] | number[];
    pt?: string | number | string[] | number[];
    pr?: string | number | string[] | number[];
    pb?: string | number | string[] | number[];
    pl?: string | number | string[] | number[];
} & {
    border?: string | number | string[] | number[];
    borderTop?: string | number | string[] | number[];
    borderRight?: string | number | string[] | number[];
    borderBottom?: string | number | string[] | number[];
    borderLeft?: string | number | string[] | number[];
    borderWidth?: string | number | string[] | number[];
    borderStyle?: string | number | string[] | number[];
    borderColor?: string;
    borderRadius?: string | number | string[] | number[];
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: string | number | string[] | number[];
    opacity?: string | number | string[] | number[];
    op?: string | number | string[] | number[];
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: string | number | string[] | number[];
    right?: string | number | string[] | number[];
    bottom?: string | number | string[] | number[];
    left?: string | number | string[] | number[];
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & import("../../../styles-global/src/types").QuickTypographyProps & import("../../../styles-global/src/types").QuickFlexProps & import("../../../styles-global/src/types").QuickPositionProps & import("../../../styles-global/src/types").MediaProps, never>;
export declare const Divider: import("styled-components").StyledComponent<"div", any, {
    center?: boolean;
} & {
    w?: string | number | string[] | number[];
    maxw?: string | number | string[] | number[];
    minw?: string | number | string[] | number[];
    h?: string | number | string[] | number[];
    minh?: string | number | string[] | number[];
    maxh?: string | number | string[] | number[];
    display?: (string | number) & (string | string[]);
    sz?: string | number | string[] | number[];
    verticalAlign?: string | string[];
} & import("../../../styles-global/src/styledSystems").TypographyProps & {
    m?: string | number | string[] | number[];
    mh?: string | number | string[] | number[];
    mv?: string | number | string[] | number[];
    mt?: string | number | string[] | number[];
    mr?: string | number | string[] | number[];
    mb?: string | number | string[] | number[];
    ml?: string | number | string[] | number[];
    p?: string | number | string[] | number[];
    ph?: string | number | string[] | number[];
    pv?: string | number | string[] | number[];
    pt?: string | number | string[] | number[];
    pr?: string | number | string[] | number[];
    pb?: string | number | string[] | number[];
    pl?: string | number | string[] | number[];
} & {
    border?: string | number | string[] | number[];
    borderTop?: string | number | string[] | number[];
    borderRight?: string | number | string[] | number[];
    borderBottom?: string | number | string[] | number[];
    borderLeft?: string | number | string[] | number[];
    borderWidth?: string | number | string[] | number[];
    borderStyle?: string | number | string[] | number[];
    borderColor?: string;
    borderRadius?: string | number | string[] | number[];
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: string | number | string[] | number[];
    opacity?: string | number | string[] | number[];
    op?: string | number | string[] | number[];
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: string | number | string[] | number[];
    right?: string | number | string[] | number[];
    bottom?: string | number | string[] | number[];
    left?: string | number | string[] | number[];
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: string | number | string[] | number[];
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & import("../../../styles-global/src/types").QuickTypographyProps & import("../../../styles-global/src/types").QuickFlexProps & import("../../../styles-global/src/types").QuickPositionProps & import("../../../styles-global/src/types").MediaProps & {
    center?: boolean;
    w?: string | number | string[] | number[];
    maxw?: string | number | string[] | number[];
    minw?: string | number | string[] | number[];
    h?: string | number | string[] | number[];
    minh: string | number | string[] | number[];
    maxh?: string | number | string[] | number[];
    display?: (string | number) & (string | string[]);
    sz?: string | number | string[] | number[];
    verticalAlign?: string | string[];
    fontSize?: string | number | string[] | number[];
    fontFamily?: string & (string | string[]);
    fontWeight?: (string | number) & (number | number[]);
    lineHeight?: string | string[];
    fontStyle?: (string | number) & (string | string[]);
    letterSpacing?: (string | number) & (string | string[]);
    m?: string | number | string[] | number[];
    mh: string | number | string[] | number[];
    mv?: string | number | string[] | number[];
    mt: string | number | string[] | number[];
    mr?: string | number | string[] | number[];
    mb: string | number | string[] | number[];
    ml?: string | number | string[] | number[];
    p?: string | number | string[] | number[];
    ph?: string | number | string[] | number[];
    pv?: string | number | string[] | number[];
    pt?: string | number | string[] | number[];
    pr?: string | number | string[] | number[];
    pb?: string | number | string[] | number[];
    pl?: string | number | string[] | number[];
    border?: string | number | string[] | number[];
    borderTop?: string | number | string[] | number[];
    borderRight?: string | number | string[] | number[];
    borderBottom?: string | number | string[] | number[];
    borderLeft?: string | number | string[] | number[];
    borderWidth?: string | number | string[] | number[];
    borderStyle?: string | number | string[] | number[];
    borderColor?: string;
    borderRadius?: string | number | string[] | number[];
    bg: any;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: string | number | string[] | number[];
    opacity?: string | number | string[] | number[];
    op?: string | number | string[] | number[];
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
    pos?: string | string[];
    zi?: number | number[];
    top?: string | number | string[] | number[];
    right?: string | number | string[] | number[];
    bottom?: string | number | string[] | number[];
    left?: string | number | string[] | number[];
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
    light?: boolean;
    regular?: boolean;
    medium?: boolean;
    semi?: boolean;
    bold?: boolean;
    extraBold?: boolean;
    black?: boolean;
    tal?: boolean;
    tar?: boolean;
    tac?: boolean;
    upcase?: boolean;
    jcc?: boolean;
    jcsa?: boolean;
    jcsb?: boolean;
    jcfs?: boolean;
    jcfe?: boolean;
    aic?: boolean;
    aifs?: boolean;
    aife?: boolean;
    ass?: boolean;
    asfs?: boolean;
    asfe?: boolean;
    asc?: boolean;
    aib?: boolean;
    jss?: boolean;
    jsfs?: boolean;
    jsfe?: boolean;
    jsc?: boolean;
    row?: boolean;
    column?: boolean;
    col?: boolean;
    vCenter?: boolean;
    hCenter?: boolean;
    flxWrap?: boolean;
    flex?: string | number;
    flex1?: boolean;
    flxOrder?: number;
    pabs?: boolean;
    prel?: boolean;
    pfix?: boolean;
    smHide?: boolean;
    mdHide?: boolean;
    lgHide?: boolean;
    theme: any;
} & {
    center?: boolean;
} & {
    w?: string | number | string[] | number[];
    maxw?: string | number | string[] | number[];
    minw?: string | number | string[] | number[];
    h?: string | number | string[] | number[];
    minh?: string | number | string[] | number[];
    maxh?: string | number | string[] | number[];
    display?: (string | number) & (string | string[]);
    sz?: string | number | string[] | number[];
    verticalAlign?: string | string[];
} & {
    m?: string | number | string[] | number[];
    mh?: string | number | string[] | number[];
    mv?: string | number | string[] | number[];
    mt?: string | number | string[] | number[];
    mr?: string | number | string[] | number[];
    mb?: string | number | string[] | number[];
    ml?: string | number | string[] | number[];
    p?: string | number | string[] | number[];
    ph?: string | number | string[] | number[];
    pv?: string | number | string[] | number[];
    pt?: string | number | string[] | number[];
    pr?: string | number | string[] | number[];
    pb?: string | number | string[] | number[];
    pl?: string | number | string[] | number[];
} & {
    border?: string | number | string[] | number[];
    borderTop?: string | number | string[] | number[];
    borderRight?: string | number | string[] | number[];
    borderBottom?: string | number | string[] | number[];
    borderLeft?: string | number | string[] | number[];
    borderWidth?: string | number | string[] | number[];
    borderStyle?: string | number | string[] | number[];
    borderColor?: string;
    borderRadius?: string | number | string[] | number[];
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: string | number | string[] | number[];
    opacity?: string | number | string[] | number[];
    op?: string | number | string[] | number[];
    overflow?: "hidden" | "auto" | "visible" | "scroll";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: string | number | string[] | number[];
    right?: string | number | string[] | number[];
    bottom?: string | number | string[] | number[];
    left?: string | number | string[] | number[];
} & {
    order?: (string | number) & (number | number[]);
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
}, "background" | "black" | "h" | "br" | "col" | "p" | "theme" | "color" | "row" | "center" | "w" | "maxw" | "minw" | "minh" | "maxh" | "display" | "sz" | "verticalAlign" | "fontSize" | "fontFamily" | "fontWeight" | "lineHeight" | "fontStyle" | "letterSpacing" | "m" | "mh" | "mv" | "mt" | "mr" | "mb" | "ml" | "ph" | "pv" | "pt" | "pr" | "pb" | "pl" | "border" | "borderTop" | "borderRight" | "borderBottom" | "borderLeft" | "borderWidth" | "borderStyle" | "borderColor" | "borderRadius" | "bg" | "bs" | "opacity" | "op" | "overflow" | "boxShadow" | "backgroundImage" | "backgroundSize" | "backgroundPosition" | "backgroundRepeat" | "anchor" | "pos" | "zi" | "top" | "right" | "bottom" | "left" | "order" | "flexWrap" | "flexShrink" | "flexBasis" | "flexDirection" | "alignSelf" | "light" | "regular" | "medium" | "semi" | "bold" | "extraBold" | "tal" | "tar" | "tac" | "upcase" | "jcc" | "jcsa" | "jcsb" | "jcfs" | "jcfe" | "aic" | "aifs" | "aife" | "ass" | "asfs" | "asfe" | "asc" | "aib" | "jss" | "jsfs" | "jsfe" | "jsc" | "column" | "vCenter" | "hCenter" | "flxWrap" | "flex" | "flex1" | "flxOrder" | "pabs" | "prel" | "pfix" | "smHide" | "mdHide" | "lgHide">;
