import { ThemedCssFunction } from 'styled-components';
import { boxProps, textProps } from './primitive';
import { scale as spaceScale } from './space';
import * as types from './types';
export declare const media: {
    sm: ThemedCssFunction<any>;
    md: ThemedCssFunction<any>;
    lg: ThemedCssFunction<any>;
};
export declare const Column: import("styled-components").StyledComponent<any, any, object & {
    col: boolean;
} & {
    center?: boolean;
} & {
    w?: string | number | string[] | number[];
    maxw?: string | number | string[] | number[];
    minw?: string | number | string[] | number[];
    h?: string | number | string[] | number[];
    minh?: string | number | string[] | number[];
    maxh?: string | number | string[] | number[];
    display?: string | string[];
    sz?: string | number | string[] | number[];
    verticalAlign?: string | string[];
} & import("./styledSystems").TypographyProps & {
    m?: string | number | string[] | number[];
    mh?: string | number | string[] | number[];
    mv?: string | number | string[] | number[];
    mt?: string | number | string[] | number[];
    mr?: string | number | string[] | number[];
    mb?: string | number | string[] | number[];
    ml?: string | number | string[] | number[];
    p?: string | number | string[] | number[];
    ph?: string | number | string[] | number[];
    pv?: string | number | string[] | number[];
    pt?: string | number | string[] | number[];
    pr?: string | number | string[] | number[];
    pb?: string | number | string[] | number[];
    pl?: string | number | string[] | number[];
} & {
    border?: string | number | string[] | number[];
    borderTop?: string | number | string[] | number[];
    borderRight?: string | number | string[] | number[];
    borderBottom?: string | number | string[] | number[];
    borderLeft?: string | number | string[] | number[];
    borderWidth?: string | number | string[] | number[];
    borderStyle?: string | number | string[] | number[];
    borderColor?: string;
    borderRadius?: string | number | string[] | number[];
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: string | number | string[] | number[];
    opacity?: string | number | string[] | number[];
    op?: string | number | string[] | number[];
    overflow?: "auto" | "hidden" | "scroll" | "visible";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: string | number | string[] | number[];
    right?: string | number | string[] | number[];
    bottom?: string | number | string[] | number[];
    left?: string | number | string[] | number[];
} & {
    order?: number | number[];
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & types.QuickTypographyProps & types.QuickFlexProps & types.QuickPositionProps & types.MediaProps, string | number | symbol>;
export declare const Row: import("styled-components").StyledComponent<any, any, object & {
    row: boolean;
} & {
    center?: boolean;
} & {
    w?: string | number | string[] | number[];
    maxw?: string | number | string[] | number[];
    minw?: string | number | string[] | number[];
    h?: string | number | string[] | number[];
    minh?: string | number | string[] | number[];
    maxh?: string | number | string[] | number[];
    display?: string | string[];
    sz?: string | number | string[] | number[];
    verticalAlign?: string | string[];
} & import("./styledSystems").TypographyProps & {
    m?: string | number | string[] | number[];
    mh?: string | number | string[] | number[];
    mv?: string | number | string[] | number[];
    mt?: string | number | string[] | number[];
    mr?: string | number | string[] | number[];
    mb?: string | number | string[] | number[];
    ml?: string | number | string[] | number[];
    p?: string | number | string[] | number[];
    ph?: string | number | string[] | number[];
    pv?: string | number | string[] | number[];
    pt?: string | number | string[] | number[];
    pr?: string | number | string[] | number[];
    pb?: string | number | string[] | number[];
    pl?: string | number | string[] | number[];
} & {
    border?: string | number | string[] | number[];
    borderTop?: string | number | string[] | number[];
    borderRight?: string | number | string[] | number[];
    borderBottom?: string | number | string[] | number[];
    borderLeft?: string | number | string[] | number[];
    borderWidth?: string | number | string[] | number[];
    borderStyle?: string | number | string[] | number[];
    borderColor?: string;
    borderRadius?: string | number | string[] | number[];
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: string | number | string[] | number[];
    opacity?: string | number | string[] | number[];
    op?: string | number | string[] | number[];
    overflow?: "auto" | "hidden" | "scroll" | "visible";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: string | number | string[] | number[];
    right?: string | number | string[] | number[];
    bottom?: string | number | string[] | number[];
    left?: string | number | string[] | number[];
} & {
    order?: number | number[];
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & types.QuickTypographyProps & types.QuickFlexProps & types.QuickPositionProps & types.MediaProps, string | number | symbol>;
export declare const Box: import("styled-components").StyledComponent<any, any, object & {
    center?: boolean;
} & {
    w?: string | number | string[] | number[];
    maxw?: string | number | string[] | number[];
    minw?: string | number | string[] | number[];
    h?: string | number | string[] | number[];
    minh?: string | number | string[] | number[];
    maxh?: string | number | string[] | number[];
    display?: string | string[];
    sz?: string | number | string[] | number[];
    verticalAlign?: string | string[];
} & import("./styledSystems").TypographyProps & {
    m?: string | number | string[] | number[];
    mh?: string | number | string[] | number[];
    mv?: string | number | string[] | number[];
    mt?: string | number | string[] | number[];
    mr?: string | number | string[] | number[];
    mb?: string | number | string[] | number[];
    ml?: string | number | string[] | number[];
    p?: string | number | string[] | number[];
    ph?: string | number | string[] | number[];
    pv?: string | number | string[] | number[];
    pt?: string | number | string[] | number[];
    pr?: string | number | string[] | number[];
    pb?: string | number | string[] | number[];
    pl?: string | number | string[] | number[];
} & {
    border?: string | number | string[] | number[];
    borderTop?: string | number | string[] | number[];
    borderRight?: string | number | string[] | number[];
    borderBottom?: string | number | string[] | number[];
    borderLeft?: string | number | string[] | number[];
    borderWidth?: string | number | string[] | number[];
    borderStyle?: string | number | string[] | number[];
    borderColor?: string;
    borderRadius?: string | number | string[] | number[];
} & {
    bg?: string;
    color?: string;
    background?: string | string[];
    bs?: string | string[];
    br?: string | number | string[] | number[];
    opacity?: string | number | string[] | number[];
    op?: string | number | string[] | number[];
    overflow?: "auto" | "hidden" | "scroll" | "visible";
    boxShadow?: string | string[];
    backgroundImage?: string | string[];
    backgroundSize?: string | string[];
    backgroundPosition?: string | string[];
    backgroundRepeat?: string | string[];
    anchor?: boolean;
} & {
    pos?: string | string[];
    zi?: number | number[];
    top?: string | number | string[] | number[];
    right?: string | number | string[] | number[];
    bottom?: string | number | string[] | number[];
    left?: string | number | string[] | number[];
} & {
    order?: number | number[];
    flexWrap?: string | string[];
    flexShrink?: (string | string[]) | (number | number[]);
    flexBasis?: string | string[];
    flexDirection?: string | string[];
    alignSelf?: string | string[];
} & types.QuickTypographyProps & types.QuickFlexProps & types.QuickPositionProps & types.MediaProps, string | number | symbol>;
declare const globalStyles: {
    size: (size: number) => string;
    anim: import("styled-components").FlattenSimpleInterpolation;
    media: {
        sm: ThemedCssFunction<any>;
        md: ThemedCssFunction<any>;
        lg: ThemedCssFunction<any>;
    };
    unselectable: import("styled-components").FlattenSimpleInterpolation;
    untouchable: import("styled-components").FlattenSimpleInterpolation;
    actionable: import("styled-components").FlattenSimpleInterpolation;
    mediaQuery: (maxWidth: number) => string;
    textProps: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<import("./styledSystems").TypographyProps & types.QuickTypographyProps, any>>;
    boxProps: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<types.BoxProps, any>>;
    spacingProps: (props: any) => any;
    breakpoints: string[];
    pabs: string;
    prel: string;
    flex: string;
    flex1: string;
    flxRow: string;
    flxCol: string;
    flxRowReverse: string;
    flxColReverse: string;
    flxWrap: string;
    aifs: string;
    aic: string;
    ais: string;
    aife: string;
    aib: string;
    jcc: string;
    jcfs: string;
    jcfe: string;
    jcsb: string;
    jcsa: string;
    asfs: string;
    asfe: string;
    asc: string;
    ass: string;
    jsfs: string;
    jsfe: string;
    jsc: string;
    jss: string;
    if: string;
    tal: string;
    tac: string;
    tar: string;
    ofh: string;
    cover: string;
    contain: string;
    anchor: string;
    full: string;
    ellipsis: string;
};
export { globalStyles as s };
export { parseUnit } from './utils';
export declare type BoxProps = types.BoxProps & types.MediaProps;
export { spaceScale };
export { boxProps, textProps };
